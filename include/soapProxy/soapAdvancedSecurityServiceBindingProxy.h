/* soapAdvancedSecurityServiceBindingProxy.h
   Generated by gSOAP 2.8.98 for samples/onvif/onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2020, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapAdvancedSecurityServiceBindingProxy_H
#define soapAdvancedSecurityServiceBindingProxy_H
#include "soapH.h"

    class SOAP_CMAC AdvancedSecurityServiceBindingProxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        /// flag indicating that this context is owned by this proxy and should be deleted by the destructor
        bool soap_own;
        /// Endpoint URL of service 'AdvancedSecurityServiceBindingProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in samples/onvif/onvif.h, if any
        /// Construct a proxy with new managing context
        AdvancedSecurityServiceBindingProxy();
        /// Copy constructor
        AdvancedSecurityServiceBindingProxy(const AdvancedSecurityServiceBindingProxy& rhs);
        /// Construct proxy given a shared managing context
        AdvancedSecurityServiceBindingProxy(struct soap*);
        /// Construct proxy given a shared managing context and endpoint URL
        AdvancedSecurityServiceBindingProxy(struct soap*, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        AdvancedSecurityServiceBindingProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        AdvancedSecurityServiceBindingProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        AdvancedSecurityServiceBindingProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        AdvancedSecurityServiceBindingProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context, when the context was allocated by the constructor
        virtual ~AdvancedSecurityServiceBindingProxy();
        /// Initializer used by constructors
        virtual void AdvancedSecurityServiceBindingProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        virtual AdvancedSecurityServiceBindingProxy *copy();
        /// Copy assignment
        AdvancedSecurityServiceBindingProxy& operator=(const AdvancedSecurityServiceBindingProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Add SOAP Header to message
        virtual void soap_header(char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct wsdd__AppSequenceType *wsdd__AppSequence, struct _wsse__Security *wsse__Security);
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'GetServiceCapabilities' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetServiceCapabilities(_tas__GetServiceCapabilities *tas__GetServiceCapabilities, _tas__GetServiceCapabilitiesResponse &tas__GetServiceCapabilitiesResponse) { return this->GetServiceCapabilities(NULL, NULL, tas__GetServiceCapabilities, tas__GetServiceCapabilitiesResponse); }
        /// Web service synchronous operation 'GetServiceCapabilities' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetServiceCapabilities(const char *soap_endpoint_url, const char *soap_action, _tas__GetServiceCapabilities *tas__GetServiceCapabilities, _tas__GetServiceCapabilitiesResponse &tas__GetServiceCapabilitiesResponse) { return this->send_GetServiceCapabilities(soap_endpoint_url, soap_action, tas__GetServiceCapabilities) || this->recv_GetServiceCapabilities(tas__GetServiceCapabilitiesResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetServiceCapabilities' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetServiceCapabilities(const char *soap_endpoint_url, const char *soap_action, _tas__GetServiceCapabilities *tas__GetServiceCapabilities);
        /// Web service asynchronous operation 'recv_GetServiceCapabilities' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetServiceCapabilities(_tas__GetServiceCapabilitiesResponse &tas__GetServiceCapabilitiesResponse);
        //
        /// Web service synchronous operation 'CreateRSAKeyPair' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int CreateRSAKeyPair(_tas__CreateRSAKeyPair *tas__CreateRSAKeyPair, _tas__CreateRSAKeyPairResponse &tas__CreateRSAKeyPairResponse) { return this->CreateRSAKeyPair(NULL, NULL, tas__CreateRSAKeyPair, tas__CreateRSAKeyPairResponse); }
        /// Web service synchronous operation 'CreateRSAKeyPair' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int CreateRSAKeyPair(const char *soap_endpoint_url, const char *soap_action, _tas__CreateRSAKeyPair *tas__CreateRSAKeyPair, _tas__CreateRSAKeyPairResponse &tas__CreateRSAKeyPairResponse) { return this->send_CreateRSAKeyPair(soap_endpoint_url, soap_action, tas__CreateRSAKeyPair) || this->recv_CreateRSAKeyPair(tas__CreateRSAKeyPairResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_CreateRSAKeyPair' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_CreateRSAKeyPair(const char *soap_endpoint_url, const char *soap_action, _tas__CreateRSAKeyPair *tas__CreateRSAKeyPair);
        /// Web service asynchronous operation 'recv_CreateRSAKeyPair' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_CreateRSAKeyPair(_tas__CreateRSAKeyPairResponse &tas__CreateRSAKeyPairResponse);
        //
        /// Web service synchronous operation 'UploadKeyPairInPKCS8' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int UploadKeyPairInPKCS8(_tas__UploadKeyPairInPKCS8 *tas__UploadKeyPairInPKCS8, _tas__UploadKeyPairInPKCS8Response &tas__UploadKeyPairInPKCS8Response) { return this->UploadKeyPairInPKCS8(NULL, NULL, tas__UploadKeyPairInPKCS8, tas__UploadKeyPairInPKCS8Response); }
        /// Web service synchronous operation 'UploadKeyPairInPKCS8' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int UploadKeyPairInPKCS8(const char *soap_endpoint_url, const char *soap_action, _tas__UploadKeyPairInPKCS8 *tas__UploadKeyPairInPKCS8, _tas__UploadKeyPairInPKCS8Response &tas__UploadKeyPairInPKCS8Response) { return this->send_UploadKeyPairInPKCS8(soap_endpoint_url, soap_action, tas__UploadKeyPairInPKCS8) || this->recv_UploadKeyPairInPKCS8(tas__UploadKeyPairInPKCS8Response) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_UploadKeyPairInPKCS8' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_UploadKeyPairInPKCS8(const char *soap_endpoint_url, const char *soap_action, _tas__UploadKeyPairInPKCS8 *tas__UploadKeyPairInPKCS8);
        /// Web service asynchronous operation 'recv_UploadKeyPairInPKCS8' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_UploadKeyPairInPKCS8(_tas__UploadKeyPairInPKCS8Response &tas__UploadKeyPairInPKCS8Response);
        //
        /// Web service synchronous operation 'UploadCertificateWithPrivateKeyInPKCS12' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int UploadCertificateWithPrivateKeyInPKCS12(_tas__UploadCertificateWithPrivateKeyInPKCS12 *tas__UploadCertificateWithPrivateKeyInPKCS12, _tas__UploadCertificateWithPrivateKeyInPKCS12Response &tas__UploadCertificateWithPrivateKeyInPKCS12Response) { return this->UploadCertificateWithPrivateKeyInPKCS12(NULL, NULL, tas__UploadCertificateWithPrivateKeyInPKCS12, tas__UploadCertificateWithPrivateKeyInPKCS12Response); }
        /// Web service synchronous operation 'UploadCertificateWithPrivateKeyInPKCS12' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int UploadCertificateWithPrivateKeyInPKCS12(const char *soap_endpoint_url, const char *soap_action, _tas__UploadCertificateWithPrivateKeyInPKCS12 *tas__UploadCertificateWithPrivateKeyInPKCS12, _tas__UploadCertificateWithPrivateKeyInPKCS12Response &tas__UploadCertificateWithPrivateKeyInPKCS12Response) { return this->send_UploadCertificateWithPrivateKeyInPKCS12(soap_endpoint_url, soap_action, tas__UploadCertificateWithPrivateKeyInPKCS12) || this->recv_UploadCertificateWithPrivateKeyInPKCS12(tas__UploadCertificateWithPrivateKeyInPKCS12Response) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_UploadCertificateWithPrivateKeyInPKCS12' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_UploadCertificateWithPrivateKeyInPKCS12(const char *soap_endpoint_url, const char *soap_action, _tas__UploadCertificateWithPrivateKeyInPKCS12 *tas__UploadCertificateWithPrivateKeyInPKCS12);
        /// Web service asynchronous operation 'recv_UploadCertificateWithPrivateKeyInPKCS12' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_UploadCertificateWithPrivateKeyInPKCS12(_tas__UploadCertificateWithPrivateKeyInPKCS12Response &tas__UploadCertificateWithPrivateKeyInPKCS12Response);
        //
        /// Web service synchronous operation 'GetKeyStatus' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetKeyStatus(_tas__GetKeyStatus *tas__GetKeyStatus, _tas__GetKeyStatusResponse &tas__GetKeyStatusResponse) { return this->GetKeyStatus(NULL, NULL, tas__GetKeyStatus, tas__GetKeyStatusResponse); }
        /// Web service synchronous operation 'GetKeyStatus' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetKeyStatus(const char *soap_endpoint_url, const char *soap_action, _tas__GetKeyStatus *tas__GetKeyStatus, _tas__GetKeyStatusResponse &tas__GetKeyStatusResponse) { return this->send_GetKeyStatus(soap_endpoint_url, soap_action, tas__GetKeyStatus) || this->recv_GetKeyStatus(tas__GetKeyStatusResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetKeyStatus' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetKeyStatus(const char *soap_endpoint_url, const char *soap_action, _tas__GetKeyStatus *tas__GetKeyStatus);
        /// Web service asynchronous operation 'recv_GetKeyStatus' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetKeyStatus(_tas__GetKeyStatusResponse &tas__GetKeyStatusResponse);
        //
        /// Web service synchronous operation 'GetPrivateKeyStatus' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetPrivateKeyStatus(_tas__GetPrivateKeyStatus *tas__GetPrivateKeyStatus, _tas__GetPrivateKeyStatusResponse &tas__GetPrivateKeyStatusResponse) { return this->GetPrivateKeyStatus(NULL, NULL, tas__GetPrivateKeyStatus, tas__GetPrivateKeyStatusResponse); }
        /// Web service synchronous operation 'GetPrivateKeyStatus' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetPrivateKeyStatus(const char *soap_endpoint_url, const char *soap_action, _tas__GetPrivateKeyStatus *tas__GetPrivateKeyStatus, _tas__GetPrivateKeyStatusResponse &tas__GetPrivateKeyStatusResponse) { return this->send_GetPrivateKeyStatus(soap_endpoint_url, soap_action, tas__GetPrivateKeyStatus) || this->recv_GetPrivateKeyStatus(tas__GetPrivateKeyStatusResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetPrivateKeyStatus' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetPrivateKeyStatus(const char *soap_endpoint_url, const char *soap_action, _tas__GetPrivateKeyStatus *tas__GetPrivateKeyStatus);
        /// Web service asynchronous operation 'recv_GetPrivateKeyStatus' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetPrivateKeyStatus(_tas__GetPrivateKeyStatusResponse &tas__GetPrivateKeyStatusResponse);
        //
        /// Web service synchronous operation 'GetAllKeys' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllKeys(_tas__GetAllKeys *tas__GetAllKeys, _tas__GetAllKeysResponse &tas__GetAllKeysResponse) { return this->GetAllKeys(NULL, NULL, tas__GetAllKeys, tas__GetAllKeysResponse); }
        /// Web service synchronous operation 'GetAllKeys' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllKeys(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllKeys *tas__GetAllKeys, _tas__GetAllKeysResponse &tas__GetAllKeysResponse) { return this->send_GetAllKeys(soap_endpoint_url, soap_action, tas__GetAllKeys) || this->recv_GetAllKeys(tas__GetAllKeysResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAllKeys' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAllKeys(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllKeys *tas__GetAllKeys);
        /// Web service asynchronous operation 'recv_GetAllKeys' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAllKeys(_tas__GetAllKeysResponse &tas__GetAllKeysResponse);
        //
        /// Web service synchronous operation 'DeleteKey' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteKey(_tas__DeleteKey *tas__DeleteKey, _tas__DeleteKeyResponse &tas__DeleteKeyResponse) { return this->DeleteKey(NULL, NULL, tas__DeleteKey, tas__DeleteKeyResponse); }
        /// Web service synchronous operation 'DeleteKey' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteKey(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteKey *tas__DeleteKey, _tas__DeleteKeyResponse &tas__DeleteKeyResponse) { return this->send_DeleteKey(soap_endpoint_url, soap_action, tas__DeleteKey) || this->recv_DeleteKey(tas__DeleteKeyResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteKey' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteKey(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteKey *tas__DeleteKey);
        /// Web service asynchronous operation 'recv_DeleteKey' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteKey(_tas__DeleteKeyResponse &tas__DeleteKeyResponse);
        //
        /// Web service synchronous operation 'CreatePKCS10CSR' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int CreatePKCS10CSR(_tas__CreatePKCS10CSR *tas__CreatePKCS10CSR, _tas__CreatePKCS10CSRResponse &tas__CreatePKCS10CSRResponse) { return this->CreatePKCS10CSR(NULL, NULL, tas__CreatePKCS10CSR, tas__CreatePKCS10CSRResponse); }
        /// Web service synchronous operation 'CreatePKCS10CSR' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int CreatePKCS10CSR(const char *soap_endpoint_url, const char *soap_action, _tas__CreatePKCS10CSR *tas__CreatePKCS10CSR, _tas__CreatePKCS10CSRResponse &tas__CreatePKCS10CSRResponse) { return this->send_CreatePKCS10CSR(soap_endpoint_url, soap_action, tas__CreatePKCS10CSR) || this->recv_CreatePKCS10CSR(tas__CreatePKCS10CSRResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_CreatePKCS10CSR' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_CreatePKCS10CSR(const char *soap_endpoint_url, const char *soap_action, _tas__CreatePKCS10CSR *tas__CreatePKCS10CSR);
        /// Web service asynchronous operation 'recv_CreatePKCS10CSR' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_CreatePKCS10CSR(_tas__CreatePKCS10CSRResponse &tas__CreatePKCS10CSRResponse);
        //
        /// Web service synchronous operation 'CreateSelfSignedCertificate' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int CreateSelfSignedCertificate(_tas__CreateSelfSignedCertificate *tas__CreateSelfSignedCertificate, _tas__CreateSelfSignedCertificateResponse &tas__CreateSelfSignedCertificateResponse) { return this->CreateSelfSignedCertificate(NULL, NULL, tas__CreateSelfSignedCertificate, tas__CreateSelfSignedCertificateResponse); }
        /// Web service synchronous operation 'CreateSelfSignedCertificate' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int CreateSelfSignedCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__CreateSelfSignedCertificate *tas__CreateSelfSignedCertificate, _tas__CreateSelfSignedCertificateResponse &tas__CreateSelfSignedCertificateResponse) { return this->send_CreateSelfSignedCertificate(soap_endpoint_url, soap_action, tas__CreateSelfSignedCertificate) || this->recv_CreateSelfSignedCertificate(tas__CreateSelfSignedCertificateResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_CreateSelfSignedCertificate' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_CreateSelfSignedCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__CreateSelfSignedCertificate *tas__CreateSelfSignedCertificate);
        /// Web service asynchronous operation 'recv_CreateSelfSignedCertificate' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_CreateSelfSignedCertificate(_tas__CreateSelfSignedCertificateResponse &tas__CreateSelfSignedCertificateResponse);
        //
        /// Web service synchronous operation 'UploadCertificate' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int UploadCertificate(_tas__UploadCertificate *tas__UploadCertificate, _tas__UploadCertificateResponse &tas__UploadCertificateResponse) { return this->UploadCertificate(NULL, NULL, tas__UploadCertificate, tas__UploadCertificateResponse); }
        /// Web service synchronous operation 'UploadCertificate' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int UploadCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__UploadCertificate *tas__UploadCertificate, _tas__UploadCertificateResponse &tas__UploadCertificateResponse) { return this->send_UploadCertificate(soap_endpoint_url, soap_action, tas__UploadCertificate) || this->recv_UploadCertificate(tas__UploadCertificateResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_UploadCertificate' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_UploadCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__UploadCertificate *tas__UploadCertificate);
        /// Web service asynchronous operation 'recv_UploadCertificate' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_UploadCertificate(_tas__UploadCertificateResponse &tas__UploadCertificateResponse);
        //
        /// Web service synchronous operation 'GetCertificate' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetCertificate(_tas__GetCertificate *tas__GetCertificate, _tas__GetCertificateResponse &tas__GetCertificateResponse) { return this->GetCertificate(NULL, NULL, tas__GetCertificate, tas__GetCertificateResponse); }
        /// Web service synchronous operation 'GetCertificate' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__GetCertificate *tas__GetCertificate, _tas__GetCertificateResponse &tas__GetCertificateResponse) { return this->send_GetCertificate(soap_endpoint_url, soap_action, tas__GetCertificate) || this->recv_GetCertificate(tas__GetCertificateResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetCertificate' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__GetCertificate *tas__GetCertificate);
        /// Web service asynchronous operation 'recv_GetCertificate' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetCertificate(_tas__GetCertificateResponse &tas__GetCertificateResponse);
        //
        /// Web service synchronous operation 'GetAllCertificates' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCertificates(_tas__GetAllCertificates *tas__GetAllCertificates, _tas__GetAllCertificatesResponse &tas__GetAllCertificatesResponse) { return this->GetAllCertificates(NULL, NULL, tas__GetAllCertificates, tas__GetAllCertificatesResponse); }
        /// Web service synchronous operation 'GetAllCertificates' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCertificates(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCertificates *tas__GetAllCertificates, _tas__GetAllCertificatesResponse &tas__GetAllCertificatesResponse) { return this->send_GetAllCertificates(soap_endpoint_url, soap_action, tas__GetAllCertificates) || this->recv_GetAllCertificates(tas__GetAllCertificatesResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAllCertificates' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAllCertificates(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCertificates *tas__GetAllCertificates);
        /// Web service asynchronous operation 'recv_GetAllCertificates' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAllCertificates(_tas__GetAllCertificatesResponse &tas__GetAllCertificatesResponse);
        //
        /// Web service synchronous operation 'DeleteCertificate' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCertificate(_tas__DeleteCertificate *tas__DeleteCertificate, _tas__DeleteCertificateResponse &tas__DeleteCertificateResponse) { return this->DeleteCertificate(NULL, NULL, tas__DeleteCertificate, tas__DeleteCertificateResponse); }
        /// Web service synchronous operation 'DeleteCertificate' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCertificate *tas__DeleteCertificate, _tas__DeleteCertificateResponse &tas__DeleteCertificateResponse) { return this->send_DeleteCertificate(soap_endpoint_url, soap_action, tas__DeleteCertificate) || this->recv_DeleteCertificate(tas__DeleteCertificateResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteCertificate' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteCertificate(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCertificate *tas__DeleteCertificate);
        /// Web service asynchronous operation 'recv_DeleteCertificate' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteCertificate(_tas__DeleteCertificateResponse &tas__DeleteCertificateResponse);
        //
        /// Web service synchronous operation 'CreateCertificationPath' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int CreateCertificationPath(_tas__CreateCertificationPath *tas__CreateCertificationPath, _tas__CreateCertificationPathResponse &tas__CreateCertificationPathResponse) { return this->CreateCertificationPath(NULL, NULL, tas__CreateCertificationPath, tas__CreateCertificationPathResponse); }
        /// Web service synchronous operation 'CreateCertificationPath' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int CreateCertificationPath(const char *soap_endpoint_url, const char *soap_action, _tas__CreateCertificationPath *tas__CreateCertificationPath, _tas__CreateCertificationPathResponse &tas__CreateCertificationPathResponse) { return this->send_CreateCertificationPath(soap_endpoint_url, soap_action, tas__CreateCertificationPath) || this->recv_CreateCertificationPath(tas__CreateCertificationPathResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_CreateCertificationPath' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_CreateCertificationPath(const char *soap_endpoint_url, const char *soap_action, _tas__CreateCertificationPath *tas__CreateCertificationPath);
        /// Web service asynchronous operation 'recv_CreateCertificationPath' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_CreateCertificationPath(_tas__CreateCertificationPathResponse &tas__CreateCertificationPathResponse);
        //
        /// Web service synchronous operation 'GetCertificationPath' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetCertificationPath(_tas__GetCertificationPath *tas__GetCertificationPath, _tas__GetCertificationPathResponse &tas__GetCertificationPathResponse) { return this->GetCertificationPath(NULL, NULL, tas__GetCertificationPath, tas__GetCertificationPathResponse); }
        /// Web service synchronous operation 'GetCertificationPath' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetCertificationPath(const char *soap_endpoint_url, const char *soap_action, _tas__GetCertificationPath *tas__GetCertificationPath, _tas__GetCertificationPathResponse &tas__GetCertificationPathResponse) { return this->send_GetCertificationPath(soap_endpoint_url, soap_action, tas__GetCertificationPath) || this->recv_GetCertificationPath(tas__GetCertificationPathResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetCertificationPath' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetCertificationPath(const char *soap_endpoint_url, const char *soap_action, _tas__GetCertificationPath *tas__GetCertificationPath);
        /// Web service asynchronous operation 'recv_GetCertificationPath' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetCertificationPath(_tas__GetCertificationPathResponse &tas__GetCertificationPathResponse);
        //
        /// Web service synchronous operation 'GetAllCertificationPaths' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCertificationPaths(_tas__GetAllCertificationPaths *tas__GetAllCertificationPaths, _tas__GetAllCertificationPathsResponse &tas__GetAllCertificationPathsResponse) { return this->GetAllCertificationPaths(NULL, NULL, tas__GetAllCertificationPaths, tas__GetAllCertificationPathsResponse); }
        /// Web service synchronous operation 'GetAllCertificationPaths' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCertificationPaths(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCertificationPaths *tas__GetAllCertificationPaths, _tas__GetAllCertificationPathsResponse &tas__GetAllCertificationPathsResponse) { return this->send_GetAllCertificationPaths(soap_endpoint_url, soap_action, tas__GetAllCertificationPaths) || this->recv_GetAllCertificationPaths(tas__GetAllCertificationPathsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAllCertificationPaths' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAllCertificationPaths(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCertificationPaths *tas__GetAllCertificationPaths);
        /// Web service asynchronous operation 'recv_GetAllCertificationPaths' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAllCertificationPaths(_tas__GetAllCertificationPathsResponse &tas__GetAllCertificationPathsResponse);
        //
        /// Web service synchronous operation 'DeleteCertificationPath' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCertificationPath(_tas__DeleteCertificationPath *tas__DeleteCertificationPath, _tas__DeleteCertificationPathResponse &tas__DeleteCertificationPathResponse) { return this->DeleteCertificationPath(NULL, NULL, tas__DeleteCertificationPath, tas__DeleteCertificationPathResponse); }
        /// Web service synchronous operation 'DeleteCertificationPath' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCertificationPath(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCertificationPath *tas__DeleteCertificationPath, _tas__DeleteCertificationPathResponse &tas__DeleteCertificationPathResponse) { return this->send_DeleteCertificationPath(soap_endpoint_url, soap_action, tas__DeleteCertificationPath) || this->recv_DeleteCertificationPath(tas__DeleteCertificationPathResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteCertificationPath' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteCertificationPath(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCertificationPath *tas__DeleteCertificationPath);
        /// Web service asynchronous operation 'recv_DeleteCertificationPath' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteCertificationPath(_tas__DeleteCertificationPathResponse &tas__DeleteCertificationPathResponse);
        //
        /// Web service synchronous operation 'UploadPassphrase' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int UploadPassphrase(_tas__UploadPassphrase *tas__UploadPassphrase, _tas__UploadPassphraseResponse &tas__UploadPassphraseResponse) { return this->UploadPassphrase(NULL, NULL, tas__UploadPassphrase, tas__UploadPassphraseResponse); }
        /// Web service synchronous operation 'UploadPassphrase' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int UploadPassphrase(const char *soap_endpoint_url, const char *soap_action, _tas__UploadPassphrase *tas__UploadPassphrase, _tas__UploadPassphraseResponse &tas__UploadPassphraseResponse) { return this->send_UploadPassphrase(soap_endpoint_url, soap_action, tas__UploadPassphrase) || this->recv_UploadPassphrase(tas__UploadPassphraseResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_UploadPassphrase' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_UploadPassphrase(const char *soap_endpoint_url, const char *soap_action, _tas__UploadPassphrase *tas__UploadPassphrase);
        /// Web service asynchronous operation 'recv_UploadPassphrase' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_UploadPassphrase(_tas__UploadPassphraseResponse &tas__UploadPassphraseResponse);
        //
        /// Web service synchronous operation 'GetAllPassphrases' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllPassphrases(_tas__GetAllPassphrases *tas__GetAllPassphrases, _tas__GetAllPassphrasesResponse &tas__GetAllPassphrasesResponse) { return this->GetAllPassphrases(NULL, NULL, tas__GetAllPassphrases, tas__GetAllPassphrasesResponse); }
        /// Web service synchronous operation 'GetAllPassphrases' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllPassphrases(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllPassphrases *tas__GetAllPassphrases, _tas__GetAllPassphrasesResponse &tas__GetAllPassphrasesResponse) { return this->send_GetAllPassphrases(soap_endpoint_url, soap_action, tas__GetAllPassphrases) || this->recv_GetAllPassphrases(tas__GetAllPassphrasesResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAllPassphrases' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAllPassphrases(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllPassphrases *tas__GetAllPassphrases);
        /// Web service asynchronous operation 'recv_GetAllPassphrases' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAllPassphrases(_tas__GetAllPassphrasesResponse &tas__GetAllPassphrasesResponse);
        //
        /// Web service synchronous operation 'DeletePassphrase' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeletePassphrase(_tas__DeletePassphrase *tas__DeletePassphrase, _tas__DeletePassphraseResponse &tas__DeletePassphraseResponse) { return this->DeletePassphrase(NULL, NULL, tas__DeletePassphrase, tas__DeletePassphraseResponse); }
        /// Web service synchronous operation 'DeletePassphrase' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeletePassphrase(const char *soap_endpoint_url, const char *soap_action, _tas__DeletePassphrase *tas__DeletePassphrase, _tas__DeletePassphraseResponse &tas__DeletePassphraseResponse) { return this->send_DeletePassphrase(soap_endpoint_url, soap_action, tas__DeletePassphrase) || this->recv_DeletePassphrase(tas__DeletePassphraseResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeletePassphrase' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeletePassphrase(const char *soap_endpoint_url, const char *soap_action, _tas__DeletePassphrase *tas__DeletePassphrase);
        /// Web service asynchronous operation 'recv_DeletePassphrase' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeletePassphrase(_tas__DeletePassphraseResponse &tas__DeletePassphraseResponse);
        //
        /// Web service synchronous operation 'UploadCRL' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int UploadCRL(_tas__UploadCRL *tas__UploadCRL, _tas__UploadCRLResponse &tas__UploadCRLResponse) { return this->UploadCRL(NULL, NULL, tas__UploadCRL, tas__UploadCRLResponse); }
        /// Web service synchronous operation 'UploadCRL' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int UploadCRL(const char *soap_endpoint_url, const char *soap_action, _tas__UploadCRL *tas__UploadCRL, _tas__UploadCRLResponse &tas__UploadCRLResponse) { return this->send_UploadCRL(soap_endpoint_url, soap_action, tas__UploadCRL) || this->recv_UploadCRL(tas__UploadCRLResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_UploadCRL' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_UploadCRL(const char *soap_endpoint_url, const char *soap_action, _tas__UploadCRL *tas__UploadCRL);
        /// Web service asynchronous operation 'recv_UploadCRL' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_UploadCRL(_tas__UploadCRLResponse &tas__UploadCRLResponse);
        //
        /// Web service synchronous operation 'GetCRL' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetCRL(_tas__GetCRL *tas__GetCRL, _tas__GetCRLResponse &tas__GetCRLResponse) { return this->GetCRL(NULL, NULL, tas__GetCRL, tas__GetCRLResponse); }
        /// Web service synchronous operation 'GetCRL' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetCRL(const char *soap_endpoint_url, const char *soap_action, _tas__GetCRL *tas__GetCRL, _tas__GetCRLResponse &tas__GetCRLResponse) { return this->send_GetCRL(soap_endpoint_url, soap_action, tas__GetCRL) || this->recv_GetCRL(tas__GetCRLResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetCRL' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetCRL(const char *soap_endpoint_url, const char *soap_action, _tas__GetCRL *tas__GetCRL);
        /// Web service asynchronous operation 'recv_GetCRL' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetCRL(_tas__GetCRLResponse &tas__GetCRLResponse);
        //
        /// Web service synchronous operation 'GetAllCRLs' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCRLs(_tas__GetAllCRLs *tas__GetAllCRLs, _tas__GetAllCRLsResponse &tas__GetAllCRLsResponse) { return this->GetAllCRLs(NULL, NULL, tas__GetAllCRLs, tas__GetAllCRLsResponse); }
        /// Web service synchronous operation 'GetAllCRLs' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCRLs(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCRLs *tas__GetAllCRLs, _tas__GetAllCRLsResponse &tas__GetAllCRLsResponse) { return this->send_GetAllCRLs(soap_endpoint_url, soap_action, tas__GetAllCRLs) || this->recv_GetAllCRLs(tas__GetAllCRLsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAllCRLs' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAllCRLs(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCRLs *tas__GetAllCRLs);
        /// Web service asynchronous operation 'recv_GetAllCRLs' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAllCRLs(_tas__GetAllCRLsResponse &tas__GetAllCRLsResponse);
        //
        /// Web service synchronous operation 'DeleteCRL' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCRL(_tas__DeleteCRL *tas__DeleteCRL, _tas__DeleteCRLResponse &tas__DeleteCRLResponse) { return this->DeleteCRL(NULL, NULL, tas__DeleteCRL, tas__DeleteCRLResponse); }
        /// Web service synchronous operation 'DeleteCRL' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCRL(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCRL *tas__DeleteCRL, _tas__DeleteCRLResponse &tas__DeleteCRLResponse) { return this->send_DeleteCRL(soap_endpoint_url, soap_action, tas__DeleteCRL) || this->recv_DeleteCRL(tas__DeleteCRLResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteCRL' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteCRL(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCRL *tas__DeleteCRL);
        /// Web service asynchronous operation 'recv_DeleteCRL' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteCRL(_tas__DeleteCRLResponse &tas__DeleteCRLResponse);
        //
        /// Web service synchronous operation 'CreateCertPathValidationPolicy' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int CreateCertPathValidationPolicy(_tas__CreateCertPathValidationPolicy *tas__CreateCertPathValidationPolicy, _tas__CreateCertPathValidationPolicyResponse &tas__CreateCertPathValidationPolicyResponse) { return this->CreateCertPathValidationPolicy(NULL, NULL, tas__CreateCertPathValidationPolicy, tas__CreateCertPathValidationPolicyResponse); }
        /// Web service synchronous operation 'CreateCertPathValidationPolicy' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int CreateCertPathValidationPolicy(const char *soap_endpoint_url, const char *soap_action, _tas__CreateCertPathValidationPolicy *tas__CreateCertPathValidationPolicy, _tas__CreateCertPathValidationPolicyResponse &tas__CreateCertPathValidationPolicyResponse) { return this->send_CreateCertPathValidationPolicy(soap_endpoint_url, soap_action, tas__CreateCertPathValidationPolicy) || this->recv_CreateCertPathValidationPolicy(tas__CreateCertPathValidationPolicyResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_CreateCertPathValidationPolicy' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_CreateCertPathValidationPolicy(const char *soap_endpoint_url, const char *soap_action, _tas__CreateCertPathValidationPolicy *tas__CreateCertPathValidationPolicy);
        /// Web service asynchronous operation 'recv_CreateCertPathValidationPolicy' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_CreateCertPathValidationPolicy(_tas__CreateCertPathValidationPolicyResponse &tas__CreateCertPathValidationPolicyResponse);
        //
        /// Web service synchronous operation 'GetCertPathValidationPolicy' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetCertPathValidationPolicy(_tas__GetCertPathValidationPolicy *tas__GetCertPathValidationPolicy, _tas__GetCertPathValidationPolicyResponse &tas__GetCertPathValidationPolicyResponse) { return this->GetCertPathValidationPolicy(NULL, NULL, tas__GetCertPathValidationPolicy, tas__GetCertPathValidationPolicyResponse); }
        /// Web service synchronous operation 'GetCertPathValidationPolicy' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetCertPathValidationPolicy(const char *soap_endpoint_url, const char *soap_action, _tas__GetCertPathValidationPolicy *tas__GetCertPathValidationPolicy, _tas__GetCertPathValidationPolicyResponse &tas__GetCertPathValidationPolicyResponse) { return this->send_GetCertPathValidationPolicy(soap_endpoint_url, soap_action, tas__GetCertPathValidationPolicy) || this->recv_GetCertPathValidationPolicy(tas__GetCertPathValidationPolicyResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetCertPathValidationPolicy' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetCertPathValidationPolicy(const char *soap_endpoint_url, const char *soap_action, _tas__GetCertPathValidationPolicy *tas__GetCertPathValidationPolicy);
        /// Web service asynchronous operation 'recv_GetCertPathValidationPolicy' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetCertPathValidationPolicy(_tas__GetCertPathValidationPolicyResponse &tas__GetCertPathValidationPolicyResponse);
        //
        /// Web service synchronous operation 'GetAllCertPathValidationPolicies' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCertPathValidationPolicies(_tas__GetAllCertPathValidationPolicies *tas__GetAllCertPathValidationPolicies, _tas__GetAllCertPathValidationPoliciesResponse &tas__GetAllCertPathValidationPoliciesResponse) { return this->GetAllCertPathValidationPolicies(NULL, NULL, tas__GetAllCertPathValidationPolicies, tas__GetAllCertPathValidationPoliciesResponse); }
        /// Web service synchronous operation 'GetAllCertPathValidationPolicies' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllCertPathValidationPolicies(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCertPathValidationPolicies *tas__GetAllCertPathValidationPolicies, _tas__GetAllCertPathValidationPoliciesResponse &tas__GetAllCertPathValidationPoliciesResponse) { return this->send_GetAllCertPathValidationPolicies(soap_endpoint_url, soap_action, tas__GetAllCertPathValidationPolicies) || this->recv_GetAllCertPathValidationPolicies(tas__GetAllCertPathValidationPoliciesResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAllCertPathValidationPolicies' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAllCertPathValidationPolicies(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllCertPathValidationPolicies *tas__GetAllCertPathValidationPolicies);
        /// Web service asynchronous operation 'recv_GetAllCertPathValidationPolicies' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAllCertPathValidationPolicies(_tas__GetAllCertPathValidationPoliciesResponse &tas__GetAllCertPathValidationPoliciesResponse);
        //
        /// Web service synchronous operation 'DeleteCertPathValidationPolicy' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCertPathValidationPolicy(_tas__DeleteCertPathValidationPolicy *tas__DeleteCertPathValidationPolicy, _tas__DeleteCertPathValidationPolicyResponse &tas__DeleteCertPathValidationPolicyResponse) { return this->DeleteCertPathValidationPolicy(NULL, NULL, tas__DeleteCertPathValidationPolicy, tas__DeleteCertPathValidationPolicyResponse); }
        /// Web service synchronous operation 'DeleteCertPathValidationPolicy' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteCertPathValidationPolicy(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCertPathValidationPolicy *tas__DeleteCertPathValidationPolicy, _tas__DeleteCertPathValidationPolicyResponse &tas__DeleteCertPathValidationPolicyResponse) { return this->send_DeleteCertPathValidationPolicy(soap_endpoint_url, soap_action, tas__DeleteCertPathValidationPolicy) || this->recv_DeleteCertPathValidationPolicy(tas__DeleteCertPathValidationPolicyResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteCertPathValidationPolicy' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteCertPathValidationPolicy(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteCertPathValidationPolicy *tas__DeleteCertPathValidationPolicy);
        /// Web service asynchronous operation 'recv_DeleteCertPathValidationPolicy' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteCertPathValidationPolicy(_tas__DeleteCertPathValidationPolicyResponse &tas__DeleteCertPathValidationPolicyResponse);
        //
        /// Web service synchronous operation 'AddServerCertificateAssignment' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int AddServerCertificateAssignment(_tas__AddServerCertificateAssignment *tas__AddServerCertificateAssignment, _tas__AddServerCertificateAssignmentResponse &tas__AddServerCertificateAssignmentResponse) { return this->AddServerCertificateAssignment(NULL, NULL, tas__AddServerCertificateAssignment, tas__AddServerCertificateAssignmentResponse); }
        /// Web service synchronous operation 'AddServerCertificateAssignment' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int AddServerCertificateAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__AddServerCertificateAssignment *tas__AddServerCertificateAssignment, _tas__AddServerCertificateAssignmentResponse &tas__AddServerCertificateAssignmentResponse) { return this->send_AddServerCertificateAssignment(soap_endpoint_url, soap_action, tas__AddServerCertificateAssignment) || this->recv_AddServerCertificateAssignment(tas__AddServerCertificateAssignmentResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_AddServerCertificateAssignment' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_AddServerCertificateAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__AddServerCertificateAssignment *tas__AddServerCertificateAssignment);
        /// Web service asynchronous operation 'recv_AddServerCertificateAssignment' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_AddServerCertificateAssignment(_tas__AddServerCertificateAssignmentResponse &tas__AddServerCertificateAssignmentResponse);
        //
        /// Web service synchronous operation 'RemoveServerCertificateAssignment' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int RemoveServerCertificateAssignment(_tas__RemoveServerCertificateAssignment *tas__RemoveServerCertificateAssignment, _tas__RemoveServerCertificateAssignmentResponse &tas__RemoveServerCertificateAssignmentResponse) { return this->RemoveServerCertificateAssignment(NULL, NULL, tas__RemoveServerCertificateAssignment, tas__RemoveServerCertificateAssignmentResponse); }
        /// Web service synchronous operation 'RemoveServerCertificateAssignment' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int RemoveServerCertificateAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__RemoveServerCertificateAssignment *tas__RemoveServerCertificateAssignment, _tas__RemoveServerCertificateAssignmentResponse &tas__RemoveServerCertificateAssignmentResponse) { return this->send_RemoveServerCertificateAssignment(soap_endpoint_url, soap_action, tas__RemoveServerCertificateAssignment) || this->recv_RemoveServerCertificateAssignment(tas__RemoveServerCertificateAssignmentResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_RemoveServerCertificateAssignment' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_RemoveServerCertificateAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__RemoveServerCertificateAssignment *tas__RemoveServerCertificateAssignment);
        /// Web service asynchronous operation 'recv_RemoveServerCertificateAssignment' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_RemoveServerCertificateAssignment(_tas__RemoveServerCertificateAssignmentResponse &tas__RemoveServerCertificateAssignmentResponse);
        //
        /// Web service synchronous operation 'ReplaceServerCertificateAssignment' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int ReplaceServerCertificateAssignment(_tas__ReplaceServerCertificateAssignment *tas__ReplaceServerCertificateAssignment, _tas__ReplaceServerCertificateAssignmentResponse &tas__ReplaceServerCertificateAssignmentResponse) { return this->ReplaceServerCertificateAssignment(NULL, NULL, tas__ReplaceServerCertificateAssignment, tas__ReplaceServerCertificateAssignmentResponse); }
        /// Web service synchronous operation 'ReplaceServerCertificateAssignment' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int ReplaceServerCertificateAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__ReplaceServerCertificateAssignment *tas__ReplaceServerCertificateAssignment, _tas__ReplaceServerCertificateAssignmentResponse &tas__ReplaceServerCertificateAssignmentResponse) { return this->send_ReplaceServerCertificateAssignment(soap_endpoint_url, soap_action, tas__ReplaceServerCertificateAssignment) || this->recv_ReplaceServerCertificateAssignment(tas__ReplaceServerCertificateAssignmentResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_ReplaceServerCertificateAssignment' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_ReplaceServerCertificateAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__ReplaceServerCertificateAssignment *tas__ReplaceServerCertificateAssignment);
        /// Web service asynchronous operation 'recv_ReplaceServerCertificateAssignment' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_ReplaceServerCertificateAssignment(_tas__ReplaceServerCertificateAssignmentResponse &tas__ReplaceServerCertificateAssignmentResponse);
        //
        /// Web service synchronous operation 'GetAssignedServerCertificates' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssignedServerCertificates(_tas__GetAssignedServerCertificates *tas__GetAssignedServerCertificates, _tas__GetAssignedServerCertificatesResponse &tas__GetAssignedServerCertificatesResponse) { return this->GetAssignedServerCertificates(NULL, NULL, tas__GetAssignedServerCertificates, tas__GetAssignedServerCertificatesResponse); }
        /// Web service synchronous operation 'GetAssignedServerCertificates' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssignedServerCertificates(const char *soap_endpoint_url, const char *soap_action, _tas__GetAssignedServerCertificates *tas__GetAssignedServerCertificates, _tas__GetAssignedServerCertificatesResponse &tas__GetAssignedServerCertificatesResponse) { return this->send_GetAssignedServerCertificates(soap_endpoint_url, soap_action, tas__GetAssignedServerCertificates) || this->recv_GetAssignedServerCertificates(tas__GetAssignedServerCertificatesResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssignedServerCertificates' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssignedServerCertificates(const char *soap_endpoint_url, const char *soap_action, _tas__GetAssignedServerCertificates *tas__GetAssignedServerCertificates);
        /// Web service asynchronous operation 'recv_GetAssignedServerCertificates' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssignedServerCertificates(_tas__GetAssignedServerCertificatesResponse &tas__GetAssignedServerCertificatesResponse);
        //
        /// Web service synchronous operation 'SetEnabledTLSVersions' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetEnabledTLSVersions(_tas__SetEnabledTLSVersions *tas__SetEnabledTLSVersions, _tas__SetEnabledTLSVersionsResponse &tas__SetEnabledTLSVersionsResponse) { return this->SetEnabledTLSVersions(NULL, NULL, tas__SetEnabledTLSVersions, tas__SetEnabledTLSVersionsResponse); }
        /// Web service synchronous operation 'SetEnabledTLSVersions' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetEnabledTLSVersions(const char *soap_endpoint_url, const char *soap_action, _tas__SetEnabledTLSVersions *tas__SetEnabledTLSVersions, _tas__SetEnabledTLSVersionsResponse &tas__SetEnabledTLSVersionsResponse) { return this->send_SetEnabledTLSVersions(soap_endpoint_url, soap_action, tas__SetEnabledTLSVersions) || this->recv_SetEnabledTLSVersions(tas__SetEnabledTLSVersionsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetEnabledTLSVersions' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetEnabledTLSVersions(const char *soap_endpoint_url, const char *soap_action, _tas__SetEnabledTLSVersions *tas__SetEnabledTLSVersions);
        /// Web service asynchronous operation 'recv_SetEnabledTLSVersions' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetEnabledTLSVersions(_tas__SetEnabledTLSVersionsResponse &tas__SetEnabledTLSVersionsResponse);
        //
        /// Web service synchronous operation 'GetEnabledTLSVersions' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetEnabledTLSVersions(_tas__GetEnabledTLSVersions *tas__GetEnabledTLSVersions, _tas__GetEnabledTLSVersionsResponse &tas__GetEnabledTLSVersionsResponse) { return this->GetEnabledTLSVersions(NULL, NULL, tas__GetEnabledTLSVersions, tas__GetEnabledTLSVersionsResponse); }
        /// Web service synchronous operation 'GetEnabledTLSVersions' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetEnabledTLSVersions(const char *soap_endpoint_url, const char *soap_action, _tas__GetEnabledTLSVersions *tas__GetEnabledTLSVersions, _tas__GetEnabledTLSVersionsResponse &tas__GetEnabledTLSVersionsResponse) { return this->send_GetEnabledTLSVersions(soap_endpoint_url, soap_action, tas__GetEnabledTLSVersions) || this->recv_GetEnabledTLSVersions(tas__GetEnabledTLSVersionsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetEnabledTLSVersions' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetEnabledTLSVersions(const char *soap_endpoint_url, const char *soap_action, _tas__GetEnabledTLSVersions *tas__GetEnabledTLSVersions);
        /// Web service asynchronous operation 'recv_GetEnabledTLSVersions' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetEnabledTLSVersions(_tas__GetEnabledTLSVersionsResponse &tas__GetEnabledTLSVersionsResponse);
        //
        /// Web service synchronous operation 'SetClientAuthenticationRequired' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetClientAuthenticationRequired(_tas__SetClientAuthenticationRequired *tas__SetClientAuthenticationRequired, _tas__SetClientAuthenticationRequiredResponse &tas__SetClientAuthenticationRequiredResponse) { return this->SetClientAuthenticationRequired(NULL, NULL, tas__SetClientAuthenticationRequired, tas__SetClientAuthenticationRequiredResponse); }
        /// Web service synchronous operation 'SetClientAuthenticationRequired' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetClientAuthenticationRequired(const char *soap_endpoint_url, const char *soap_action, _tas__SetClientAuthenticationRequired *tas__SetClientAuthenticationRequired, _tas__SetClientAuthenticationRequiredResponse &tas__SetClientAuthenticationRequiredResponse) { return this->send_SetClientAuthenticationRequired(soap_endpoint_url, soap_action, tas__SetClientAuthenticationRequired) || this->recv_SetClientAuthenticationRequired(tas__SetClientAuthenticationRequiredResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetClientAuthenticationRequired' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetClientAuthenticationRequired(const char *soap_endpoint_url, const char *soap_action, _tas__SetClientAuthenticationRequired *tas__SetClientAuthenticationRequired);
        /// Web service asynchronous operation 'recv_SetClientAuthenticationRequired' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetClientAuthenticationRequired(_tas__SetClientAuthenticationRequiredResponse &tas__SetClientAuthenticationRequiredResponse);
        //
        /// Web service synchronous operation 'GetClientAuthenticationRequired' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetClientAuthenticationRequired(_tas__GetClientAuthenticationRequired *tas__GetClientAuthenticationRequired, _tas__GetClientAuthenticationRequiredResponse &tas__GetClientAuthenticationRequiredResponse) { return this->GetClientAuthenticationRequired(NULL, NULL, tas__GetClientAuthenticationRequired, tas__GetClientAuthenticationRequiredResponse); }
        /// Web service synchronous operation 'GetClientAuthenticationRequired' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetClientAuthenticationRequired(const char *soap_endpoint_url, const char *soap_action, _tas__GetClientAuthenticationRequired *tas__GetClientAuthenticationRequired, _tas__GetClientAuthenticationRequiredResponse &tas__GetClientAuthenticationRequiredResponse) { return this->send_GetClientAuthenticationRequired(soap_endpoint_url, soap_action, tas__GetClientAuthenticationRequired) || this->recv_GetClientAuthenticationRequired(tas__GetClientAuthenticationRequiredResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetClientAuthenticationRequired' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetClientAuthenticationRequired(const char *soap_endpoint_url, const char *soap_action, _tas__GetClientAuthenticationRequired *tas__GetClientAuthenticationRequired);
        /// Web service asynchronous operation 'recv_GetClientAuthenticationRequired' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetClientAuthenticationRequired(_tas__GetClientAuthenticationRequiredResponse &tas__GetClientAuthenticationRequiredResponse);
        //
        /// Web service synchronous operation 'SetCnMapsToUser' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetCnMapsToUser(_tas__SetCnMapsToUser *tas__SetCnMapsToUser, _tas__SetCnMapsToUserResponse &tas__SetCnMapsToUserResponse) { return this->SetCnMapsToUser(NULL, NULL, tas__SetCnMapsToUser, tas__SetCnMapsToUserResponse); }
        /// Web service synchronous operation 'SetCnMapsToUser' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetCnMapsToUser(const char *soap_endpoint_url, const char *soap_action, _tas__SetCnMapsToUser *tas__SetCnMapsToUser, _tas__SetCnMapsToUserResponse &tas__SetCnMapsToUserResponse) { return this->send_SetCnMapsToUser(soap_endpoint_url, soap_action, tas__SetCnMapsToUser) || this->recv_SetCnMapsToUser(tas__SetCnMapsToUserResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetCnMapsToUser' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetCnMapsToUser(const char *soap_endpoint_url, const char *soap_action, _tas__SetCnMapsToUser *tas__SetCnMapsToUser);
        /// Web service asynchronous operation 'recv_SetCnMapsToUser' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetCnMapsToUser(_tas__SetCnMapsToUserResponse &tas__SetCnMapsToUserResponse);
        //
        /// Web service synchronous operation 'GetCnMapsToUser' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetCnMapsToUser(_tas__GetCnMapsToUser *tas__GetCnMapsToUser, _tas__GetCnMapsToUserResponse &tas__GetCnMapsToUserResponse) { return this->GetCnMapsToUser(NULL, NULL, tas__GetCnMapsToUser, tas__GetCnMapsToUserResponse); }
        /// Web service synchronous operation 'GetCnMapsToUser' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetCnMapsToUser(const char *soap_endpoint_url, const char *soap_action, _tas__GetCnMapsToUser *tas__GetCnMapsToUser, _tas__GetCnMapsToUserResponse &tas__GetCnMapsToUserResponse) { return this->send_GetCnMapsToUser(soap_endpoint_url, soap_action, tas__GetCnMapsToUser) || this->recv_GetCnMapsToUser(tas__GetCnMapsToUserResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetCnMapsToUser' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetCnMapsToUser(const char *soap_endpoint_url, const char *soap_action, _tas__GetCnMapsToUser *tas__GetCnMapsToUser);
        /// Web service asynchronous operation 'recv_GetCnMapsToUser' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetCnMapsToUser(_tas__GetCnMapsToUserResponse &tas__GetCnMapsToUserResponse);
        //
        /// Web service synchronous operation 'AddCertPathValidationPolicyAssignment' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int AddCertPathValidationPolicyAssignment(_tas__AddCertPathValidationPolicyAssignment *tas__AddCertPathValidationPolicyAssignment, _tas__AddCertPathValidationPolicyAssignmentResponse &tas__AddCertPathValidationPolicyAssignmentResponse) { return this->AddCertPathValidationPolicyAssignment(NULL, NULL, tas__AddCertPathValidationPolicyAssignment, tas__AddCertPathValidationPolicyAssignmentResponse); }
        /// Web service synchronous operation 'AddCertPathValidationPolicyAssignment' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int AddCertPathValidationPolicyAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__AddCertPathValidationPolicyAssignment *tas__AddCertPathValidationPolicyAssignment, _tas__AddCertPathValidationPolicyAssignmentResponse &tas__AddCertPathValidationPolicyAssignmentResponse) { return this->send_AddCertPathValidationPolicyAssignment(soap_endpoint_url, soap_action, tas__AddCertPathValidationPolicyAssignment) || this->recv_AddCertPathValidationPolicyAssignment(tas__AddCertPathValidationPolicyAssignmentResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_AddCertPathValidationPolicyAssignment' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_AddCertPathValidationPolicyAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__AddCertPathValidationPolicyAssignment *tas__AddCertPathValidationPolicyAssignment);
        /// Web service asynchronous operation 'recv_AddCertPathValidationPolicyAssignment' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_AddCertPathValidationPolicyAssignment(_tas__AddCertPathValidationPolicyAssignmentResponse &tas__AddCertPathValidationPolicyAssignmentResponse);
        //
        /// Web service synchronous operation 'RemoveCertPathValidationPolicyAssignment' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int RemoveCertPathValidationPolicyAssignment(_tas__RemoveCertPathValidationPolicyAssignment *tas__RemoveCertPathValidationPolicyAssignment, _tas__RemoveCertPathValidationPolicyAssignmentResponse &tas__RemoveCertPathValidationPolicyAssignmentResponse) { return this->RemoveCertPathValidationPolicyAssignment(NULL, NULL, tas__RemoveCertPathValidationPolicyAssignment, tas__RemoveCertPathValidationPolicyAssignmentResponse); }
        /// Web service synchronous operation 'RemoveCertPathValidationPolicyAssignment' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int RemoveCertPathValidationPolicyAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__RemoveCertPathValidationPolicyAssignment *tas__RemoveCertPathValidationPolicyAssignment, _tas__RemoveCertPathValidationPolicyAssignmentResponse &tas__RemoveCertPathValidationPolicyAssignmentResponse) { return this->send_RemoveCertPathValidationPolicyAssignment(soap_endpoint_url, soap_action, tas__RemoveCertPathValidationPolicyAssignment) || this->recv_RemoveCertPathValidationPolicyAssignment(tas__RemoveCertPathValidationPolicyAssignmentResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_RemoveCertPathValidationPolicyAssignment' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_RemoveCertPathValidationPolicyAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__RemoveCertPathValidationPolicyAssignment *tas__RemoveCertPathValidationPolicyAssignment);
        /// Web service asynchronous operation 'recv_RemoveCertPathValidationPolicyAssignment' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_RemoveCertPathValidationPolicyAssignment(_tas__RemoveCertPathValidationPolicyAssignmentResponse &tas__RemoveCertPathValidationPolicyAssignmentResponse);
        //
        /// Web service synchronous operation 'ReplaceCertPathValidationPolicyAssignment' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int ReplaceCertPathValidationPolicyAssignment(_tas__ReplaceCertPathValidationPolicyAssignment *tas__ReplaceCertPathValidationPolicyAssignment, _tas__ReplaceCertPathValidationPolicyAssignmentResponse &tas__ReplaceCertPathValidationPolicyAssignmentResponse) { return this->ReplaceCertPathValidationPolicyAssignment(NULL, NULL, tas__ReplaceCertPathValidationPolicyAssignment, tas__ReplaceCertPathValidationPolicyAssignmentResponse); }
        /// Web service synchronous operation 'ReplaceCertPathValidationPolicyAssignment' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int ReplaceCertPathValidationPolicyAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__ReplaceCertPathValidationPolicyAssignment *tas__ReplaceCertPathValidationPolicyAssignment, _tas__ReplaceCertPathValidationPolicyAssignmentResponse &tas__ReplaceCertPathValidationPolicyAssignmentResponse) { return this->send_ReplaceCertPathValidationPolicyAssignment(soap_endpoint_url, soap_action, tas__ReplaceCertPathValidationPolicyAssignment) || this->recv_ReplaceCertPathValidationPolicyAssignment(tas__ReplaceCertPathValidationPolicyAssignmentResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_ReplaceCertPathValidationPolicyAssignment' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_ReplaceCertPathValidationPolicyAssignment(const char *soap_endpoint_url, const char *soap_action, _tas__ReplaceCertPathValidationPolicyAssignment *tas__ReplaceCertPathValidationPolicyAssignment);
        /// Web service asynchronous operation 'recv_ReplaceCertPathValidationPolicyAssignment' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_ReplaceCertPathValidationPolicyAssignment(_tas__ReplaceCertPathValidationPolicyAssignmentResponse &tas__ReplaceCertPathValidationPolicyAssignmentResponse);
        //
        /// Web service synchronous operation 'GetAssignedCertPathValidationPolicies' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssignedCertPathValidationPolicies(_tas__GetAssignedCertPathValidationPolicies *tas__GetAssignedCertPathValidationPolicies, _tas__GetAssignedCertPathValidationPoliciesResponse &tas__GetAssignedCertPathValidationPoliciesResponse) { return this->GetAssignedCertPathValidationPolicies(NULL, NULL, tas__GetAssignedCertPathValidationPolicies, tas__GetAssignedCertPathValidationPoliciesResponse); }
        /// Web service synchronous operation 'GetAssignedCertPathValidationPolicies' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAssignedCertPathValidationPolicies(const char *soap_endpoint_url, const char *soap_action, _tas__GetAssignedCertPathValidationPolicies *tas__GetAssignedCertPathValidationPolicies, _tas__GetAssignedCertPathValidationPoliciesResponse &tas__GetAssignedCertPathValidationPoliciesResponse) { return this->send_GetAssignedCertPathValidationPolicies(soap_endpoint_url, soap_action, tas__GetAssignedCertPathValidationPolicies) || this->recv_GetAssignedCertPathValidationPolicies(tas__GetAssignedCertPathValidationPoliciesResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAssignedCertPathValidationPolicies' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAssignedCertPathValidationPolicies(const char *soap_endpoint_url, const char *soap_action, _tas__GetAssignedCertPathValidationPolicies *tas__GetAssignedCertPathValidationPolicies);
        /// Web service asynchronous operation 'recv_GetAssignedCertPathValidationPolicies' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAssignedCertPathValidationPolicies(_tas__GetAssignedCertPathValidationPoliciesResponse &tas__GetAssignedCertPathValidationPoliciesResponse);
        //
        /// Web service synchronous operation 'AddDot1XConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int AddDot1XConfiguration(_tas__AddDot1XConfiguration *tas__AddDot1XConfiguration, _tas__AddDot1XConfigurationResponse &tas__AddDot1XConfigurationResponse) { return this->AddDot1XConfiguration(NULL, NULL, tas__AddDot1XConfiguration, tas__AddDot1XConfigurationResponse); }
        /// Web service synchronous operation 'AddDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int AddDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__AddDot1XConfiguration *tas__AddDot1XConfiguration, _tas__AddDot1XConfigurationResponse &tas__AddDot1XConfigurationResponse) { return this->send_AddDot1XConfiguration(soap_endpoint_url, soap_action, tas__AddDot1XConfiguration) || this->recv_AddDot1XConfiguration(tas__AddDot1XConfigurationResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_AddDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_AddDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__AddDot1XConfiguration *tas__AddDot1XConfiguration);
        /// Web service asynchronous operation 'recv_AddDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_AddDot1XConfiguration(_tas__AddDot1XConfigurationResponse &tas__AddDot1XConfigurationResponse);
        //
        /// Web service synchronous operation 'GetAllDot1XConfigurations' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllDot1XConfigurations(_tas__GetAllDot1XConfigurations *tas__GetAllDot1XConfigurations, _tas__GetAllDot1XConfigurationsResponse &tas__GetAllDot1XConfigurationsResponse) { return this->GetAllDot1XConfigurations(NULL, NULL, tas__GetAllDot1XConfigurations, tas__GetAllDot1XConfigurationsResponse); }
        /// Web service synchronous operation 'GetAllDot1XConfigurations' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetAllDot1XConfigurations(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllDot1XConfigurations *tas__GetAllDot1XConfigurations, _tas__GetAllDot1XConfigurationsResponse &tas__GetAllDot1XConfigurationsResponse) { return this->send_GetAllDot1XConfigurations(soap_endpoint_url, soap_action, tas__GetAllDot1XConfigurations) || this->recv_GetAllDot1XConfigurations(tas__GetAllDot1XConfigurationsResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetAllDot1XConfigurations' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetAllDot1XConfigurations(const char *soap_endpoint_url, const char *soap_action, _tas__GetAllDot1XConfigurations *tas__GetAllDot1XConfigurations);
        /// Web service asynchronous operation 'recv_GetAllDot1XConfigurations' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetAllDot1XConfigurations(_tas__GetAllDot1XConfigurationsResponse &tas__GetAllDot1XConfigurationsResponse);
        //
        /// Web service synchronous operation 'GetDot1XConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetDot1XConfiguration(_tas__GetDot1XConfiguration *tas__GetDot1XConfiguration, _tas__GetDot1XConfigurationResponse &tas__GetDot1XConfigurationResponse) { return this->GetDot1XConfiguration(NULL, NULL, tas__GetDot1XConfiguration, tas__GetDot1XConfigurationResponse); }
        /// Web service synchronous operation 'GetDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__GetDot1XConfiguration *tas__GetDot1XConfiguration, _tas__GetDot1XConfigurationResponse &tas__GetDot1XConfigurationResponse) { return this->send_GetDot1XConfiguration(soap_endpoint_url, soap_action, tas__GetDot1XConfiguration) || this->recv_GetDot1XConfiguration(tas__GetDot1XConfigurationResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__GetDot1XConfiguration *tas__GetDot1XConfiguration);
        /// Web service asynchronous operation 'recv_GetDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetDot1XConfiguration(_tas__GetDot1XConfigurationResponse &tas__GetDot1XConfigurationResponse);
        //
        /// Web service synchronous operation 'DeleteDot1XConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteDot1XConfiguration(_tas__DeleteDot1XConfiguration *tas__DeleteDot1XConfiguration, _tas__DeleteDot1XConfigurationResponse &tas__DeleteDot1XConfigurationResponse) { return this->DeleteDot1XConfiguration(NULL, NULL, tas__DeleteDot1XConfiguration, tas__DeleteDot1XConfigurationResponse); }
        /// Web service synchronous operation 'DeleteDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteDot1XConfiguration *tas__DeleteDot1XConfiguration, _tas__DeleteDot1XConfigurationResponse &tas__DeleteDot1XConfigurationResponse) { return this->send_DeleteDot1XConfiguration(soap_endpoint_url, soap_action, tas__DeleteDot1XConfiguration) || this->recv_DeleteDot1XConfiguration(tas__DeleteDot1XConfigurationResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteDot1XConfiguration *tas__DeleteDot1XConfiguration);
        /// Web service asynchronous operation 'recv_DeleteDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteDot1XConfiguration(_tas__DeleteDot1XConfigurationResponse &tas__DeleteDot1XConfigurationResponse);
        //
        /// Web service synchronous operation 'SetNetworkInterfaceDot1XConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetNetworkInterfaceDot1XConfiguration(_tas__SetNetworkInterfaceDot1XConfiguration *tas__SetNetworkInterfaceDot1XConfiguration, _tas__SetNetworkInterfaceDot1XConfigurationResponse &tas__SetNetworkInterfaceDot1XConfigurationResponse) { return this->SetNetworkInterfaceDot1XConfiguration(NULL, NULL, tas__SetNetworkInterfaceDot1XConfiguration, tas__SetNetworkInterfaceDot1XConfigurationResponse); }
        /// Web service synchronous operation 'SetNetworkInterfaceDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetNetworkInterfaceDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__SetNetworkInterfaceDot1XConfiguration *tas__SetNetworkInterfaceDot1XConfiguration, _tas__SetNetworkInterfaceDot1XConfigurationResponse &tas__SetNetworkInterfaceDot1XConfigurationResponse) { return this->send_SetNetworkInterfaceDot1XConfiguration(soap_endpoint_url, soap_action, tas__SetNetworkInterfaceDot1XConfiguration) || this->recv_SetNetworkInterfaceDot1XConfiguration(tas__SetNetworkInterfaceDot1XConfigurationResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetNetworkInterfaceDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetNetworkInterfaceDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__SetNetworkInterfaceDot1XConfiguration *tas__SetNetworkInterfaceDot1XConfiguration);
        /// Web service asynchronous operation 'recv_SetNetworkInterfaceDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetNetworkInterfaceDot1XConfiguration(_tas__SetNetworkInterfaceDot1XConfigurationResponse &tas__SetNetworkInterfaceDot1XConfigurationResponse);
        //
        /// Web service synchronous operation 'GetNetworkInterfaceDot1XConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetNetworkInterfaceDot1XConfiguration(_tas__GetNetworkInterfaceDot1XConfiguration *tas__GetNetworkInterfaceDot1XConfiguration, _tas__GetNetworkInterfaceDot1XConfigurationResponse &tas__GetNetworkInterfaceDot1XConfigurationResponse) { return this->GetNetworkInterfaceDot1XConfiguration(NULL, NULL, tas__GetNetworkInterfaceDot1XConfiguration, tas__GetNetworkInterfaceDot1XConfigurationResponse); }
        /// Web service synchronous operation 'GetNetworkInterfaceDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetNetworkInterfaceDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__GetNetworkInterfaceDot1XConfiguration *tas__GetNetworkInterfaceDot1XConfiguration, _tas__GetNetworkInterfaceDot1XConfigurationResponse &tas__GetNetworkInterfaceDot1XConfigurationResponse) { return this->send_GetNetworkInterfaceDot1XConfiguration(soap_endpoint_url, soap_action, tas__GetNetworkInterfaceDot1XConfiguration) || this->recv_GetNetworkInterfaceDot1XConfiguration(tas__GetNetworkInterfaceDot1XConfigurationResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetNetworkInterfaceDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetNetworkInterfaceDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__GetNetworkInterfaceDot1XConfiguration *tas__GetNetworkInterfaceDot1XConfiguration);
        /// Web service asynchronous operation 'recv_GetNetworkInterfaceDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetNetworkInterfaceDot1XConfiguration(_tas__GetNetworkInterfaceDot1XConfigurationResponse &tas__GetNetworkInterfaceDot1XConfigurationResponse);
        //
        /// Web service synchronous operation 'DeleteNetworkInterfaceDot1XConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteNetworkInterfaceDot1XConfiguration(_tas__DeleteNetworkInterfaceDot1XConfiguration *tas__DeleteNetworkInterfaceDot1XConfiguration, _tas__DeleteNetworkInterfaceDot1XConfigurationResponse &tas__DeleteNetworkInterfaceDot1XConfigurationResponse) { return this->DeleteNetworkInterfaceDot1XConfiguration(NULL, NULL, tas__DeleteNetworkInterfaceDot1XConfiguration, tas__DeleteNetworkInterfaceDot1XConfigurationResponse); }
        /// Web service synchronous operation 'DeleteNetworkInterfaceDot1XConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int DeleteNetworkInterfaceDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteNetworkInterfaceDot1XConfiguration *tas__DeleteNetworkInterfaceDot1XConfiguration, _tas__DeleteNetworkInterfaceDot1XConfigurationResponse &tas__DeleteNetworkInterfaceDot1XConfigurationResponse) { return this->send_DeleteNetworkInterfaceDot1XConfiguration(soap_endpoint_url, soap_action, tas__DeleteNetworkInterfaceDot1XConfiguration) || this->recv_DeleteNetworkInterfaceDot1XConfiguration(tas__DeleteNetworkInterfaceDot1XConfigurationResponse) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_DeleteNetworkInterfaceDot1XConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_DeleteNetworkInterfaceDot1XConfiguration(const char *soap_endpoint_url, const char *soap_action, _tas__DeleteNetworkInterfaceDot1XConfiguration *tas__DeleteNetworkInterfaceDot1XConfiguration);
        /// Web service asynchronous operation 'recv_DeleteNetworkInterfaceDot1XConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_DeleteNetworkInterfaceDot1XConfiguration(_tas__DeleteNetworkInterfaceDot1XConfigurationResponse &tas__DeleteNetworkInterfaceDot1XConfigurationResponse);
    };
#endif
